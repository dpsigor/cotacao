#!/bin/node
const http = require('https');

const tickerArgs = process.argv.slice(2, process.argv.length);

const rgx = new RegExp(/YMlKec fxKbKc[\w\W\n]+?>R\$(?<price>.+?)<[\w\W\n]+?last closing price<[\w\W\n]+?P6K39c">R\$(?<prevClose>.+?)<[\w\W\n]+?P6K39c">R\$(?<minmax>.+?)</s);
let tickers = [];
if (tickerArgs.length) {
  tickers = tickerArgs.map(x => x).map(x => x.toUpperCase());
} else {
  tickers = [
    'AAPL34',
    'BBDC4',
    'CVCB3',
    'FBOK34',
    'ITUB4',
    'IVVB11',
    'TSLA34',
  ];
}

const parseHTML = (html, ticker) => {
  if (!html) {
    console.error(ticker, 'Req falhou');
    return null;
  }
  const match = html.match(rgx);
  if (!match) return null;
  const {
    price,
    prevClose,
    minmax,
  } = match.groups;
  const [min, max] = minmax.replace('R$', '').split('-').map(s => s.trim());
  const change = ((1 - parseFloat(price) / parseFloat(prevClose)) * 100).toFixed(2) + '%';
  return {
    ticker,
    min,
    price,
    max,
    prevClose,
    change,
  }
}

const getInfo = async (ticker) => {
  try {
    return new Promise((resolve, reject) => {
      const options = {
        method: 'GET',
        hostname: 'www.google.com',
        path: `/finance/quote/${ticker}:BVMF`,
        timeout: 3000,
      };
      const req = http.request(options, function (res) {
        const chunks = [];
        res.on('data', function (chunk) {
          chunks.push(chunk);
        });
        res.on('end', function () {
          const body = Buffer.concat(chunks);
          const info = parseHTML(String(body), ticker);
          resolve(info);
        });
        res.on('error', (e) => {
          console.error(e);
          resolve(null);
        });
      });
      req.on('timeout', () => {
        req.abort();
        resolve(null);
      });
      req.end();
    });
  } catch (e) {
    console.error('erro', e);
    return null;
  }
}

(async () => {
  console.log();
  const infos = await Promise.all(tickers.map(async t => await getInfo(t)));
  if (infos.filter(x => !!x).length) console.table(infos.filter(x => !!x));
  const falharam = tickers.filter(t => !infos.filter(x => !!x).map(i => i.ticker).includes(t));
  if (falharam.length) console.log('Falhou:', falharam.join(' '));
  console.log();
})();
