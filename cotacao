#!/bin/node
const http = require('https');

const flags = {
  '-t': false,
  '-j': false,
};
const rgx = new RegExp(/YMlKec fxKbKc[\w\W\n]+?>R\$(?<price>.+?)<[\w\W\n]+?last closing price<[\w\W\n]+?P6K39c">R\$(?<prevClose>.+?)<[\w\W\n]+?P6K39c">R\$(?<minmax>.+?)</s);

const args = process.argv.slice(2, process.argv.length);
let tickers = [];
args.forEach(a => Object.keys(flags).includes(a) ? flags[a] = true : tickers.push(a));
if (!tickers.length) {
  tickers = [
    'AAPL34',
    'AMZO34',
    'BBDC4',
    'GOGL34',
    'ITUB4',
    'NVDC34',
    'TSLA34',
    'CVCB3',
    'FBOK34',
    'IVVB11',
  ];
}

const parseHTML = (html, ticker) => {
  if (!html) {
    console.error(ticker, 'Req falhou');
    return null;
  }
  const match = html.match(rgx);
  if (!match) return null;
  const {
    price,
    prevClose,
    minmax,
  } = match.groups;
  const [min, max] = minmax.replace('R$', '').split('-').map(s => s.trim());
  const change = ((parseFloat(price) / parseFloat(prevClose) - 1) * 100).toFixed(2) + '%';
  return {
    ticker,
    min,
    price,
    max,
    prevClose,
    change,
  }
}

const getInfo = async (ticker) => {
  try {
    return new Promise((resolve, reject) => {
      const options = {
        method: 'GET',
        hostname: 'www.google.com',
        path: `/finance/quote/${ticker}:BVMF`,
        timeout: 3000,
      };
      const req = http.request(options, function (res) {
        const chunks = [];
        res.on('data', function (chunk) {
          chunks.push(chunk);
        });
        res.on('end', function () {
          const body = Buffer.concat(chunks);
          const info = parseHTML(String(body), ticker);
          resolve(info);
        });
        res.on('error', (e) => {
          console.error(e);
          resolve(null);
        });
      });
      req.on('timeout', () => {
        req.abort();
        resolve(null);
      });
      req.end();
    });
  } catch (e) {
    console.error('erro', e);
    return null;
  }
}

(async () => {
  if (!flags['-j']) console.log();
  const start = new Date();
  const infos = await Promise.all(tickers.map(async t => await getInfo(t)));
  const rslt = infos.filter(x => !!x);
  rslt.filter(x => !!x).length ? flags['-j'] ? console.log(JSON.stringify(rslt)) : console.table(rslt) : null;
  if (flags['-j']) return;
  const falharam = tickers.filter(t => !rslt.map(i => i.ticker).includes(t));
  if (falharam.length) console.log('Falharam:', falharam.join(' '));
  if (flags['-t']) console.log(`cotacao demorou ${(new Date().valueOf() - start.valueOf())/1000}s para ${tickers.length} tickers`);
  console.log();
})();
